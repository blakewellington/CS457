----------------------------------------------------------------------
CS457/557 Functional Languages, Winter 2014                 Homework 1
----------------------------------------------------------------------

Due: At the start of class (10am) on January 16, 2014 in person, or by
the same time if you submit by email or D2L.

To complete this set of homework exercises, you may need to use or know
about the following small collection of Haskell prelude functions that
have not yet been discussed in class:

- null :: [a] -> Bool   returns True if it is applied to an empty
  list and False otherwise.  For example null [] is True, while
  null [1,2,3] is False.

- head :: [a] -> a returns the first value in a nonempty list.  For
  example, head [1,2,3,4] is 1.

- tail :: [a] -> [a] returns the input list but with its first element
  removed.  For example, tail [1,2,3,4] is [2,3,4].

- takeWhile :: (a -> Bool) -> [a] -> [a], returns all of the values at
  the front of the input list that satisfy the predicate argument.
  For example, takeWhile even [2,4,8,11,12,20] returns [2,4,8].
  while takeWhile even [1..10] returns [].

----------------------------------------------------------------------
1. Explain what the following Haskell function does:

> dup    :: (a -> a -> a) -> a -> a
> dup f x = f x x

Now Consider the following two functions, and show how each of them
can be rewritten using dup:

> double  :: Integer -> Integer
> double n = 2 * n

> square  :: Integer -> Integer
> square n = n * n

----------------------------------------------------------------------
2. Without using any explicit recursion, given Haskell definitions for
the following functions:

- powerOfTwo :: Int -> Integer
  (powerOfTwo n) returns the value of 2 to the power n.  For example,
  powerOfTwo 8 should return 256.  Of course, your answer should *not*
  use the built in Haskell functions for raising a value to a power :-)

- logTwo :: Integer -> Int
  (logTwo v) returns the smallest integer n such that v < powerOfTwo n.

- copy :: Int -> a -> [a]
  (copy n x) returns a list containing n copies of the value x.  For
  example, copy 3 True should give [True, True, True].  (The Haskell
  prelude includes a similar function called replicate; of course,
  you should not use replicate in your answer; you should not replicate
  replicate either :-)

- multiApply :: (a -> a) -> Int -> a -> a
  (multiApply f n x)  returns the value that is obtained when the
  function f is applied n times to the value x.  For example,
  multiApply square 2 2, should return 16, while
  multiApply not 0 True will return True.

Now suppose that we define the following function using multiApply:

> q f n m x = multiApply (multiApply f n) m x

What is the type of this function, and what exactly does it do?

----------------------------------------------------------------------
3.  The Haskell prelude includes an operator !! for selecting a numbered
element of the list, with the first element starting at index 0.  For
example, [1..10] !! 0 is 1, while [1..10] !! 7 is 6.  Give a definition
for a Haskell function revindex that performs the same indexing function
as (!!) except that it starts counting from the end of the input list.
For example, revindex [1..10] 0 should return 10, while revindex [1..10] 7
whould return 3.

----------------------------------------------------------------------
4.  Consider the following fragment of Haskell code:

> strange xs = head (head (reverse (takeWhile notnull (iterate twirl xs))))
> notnull xs = not (null xs)
> twirl xs   = reverse (tail xs)

Explain carefully what the function does.  You may want to type this code in
to a Hugs script and try running tests or using the :t command to provide
clues.  Can you suggest an alternative definition for strange that is more
efficient, more concise, and also easier to understand?

----------------------------------------------------------------------
